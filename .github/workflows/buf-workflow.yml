name: Buf CI Pipeline1

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  lint-breaking:
    name: Buf Lint & Breaking
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Buf CLI
        uses: bufbuild/buf-setup-action@v1

      - name: Buf Lint
        run: buf lint

      - name: Buf Breaking
        run: buf breaking --against '.git#branch=main'

  generate:
    name: Buf Generate Code
    runs-on: ubuntu-latest
    needs: lint-breaking

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Buf CLI
        uses: bufbuild/buf-setup-action@v1

      - name: Generate Code
        run: buf generate

      - name: Upload generated code
        uses: actions/upload-artifact@v3
        with:
          name: generated-code
          path: |
            gen/go
            gen/rust
            gen/ts
            gen/grpc-web

  publish:
    name: Publish & Git Tag
    runs-on: ubuntu-latest
    needs: generate

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Buf CLI
        uses: bufbuild/buf-setup-action@v1

      - name: Set up Rust
        uses: actions/setup-rust@v1

      - name: Install Rust proto plugins
        run: |
          cargo install protoc-gen-prost protoc-gen-tonic
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Debug generated output
        run: |
          echo "=== gen/go ==="
          ls -R gen/go || echo "no go code"
          echo "=== gen/rust ==="
          ls -R gen/rust || echo "no rust code"
          echo "=== gen/ts ==="
          ls -R gen/ts || echo "no ts code"
          echo "=== gen/grpc-web ==="
          ls -R gen/grpc-web || echo "no grpc-web code"

      - name: Set up Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Bump version (patch)
        run: |
          version=$(git tag --sort=-v:refname | head -n 1 | sed 's/v//')
          IFS='.' read -r major minor patch <<< "${version:-0.1.0}"
          new_version="v$major.$minor.$((patch + 1))"
          echo "New version: $new_version"
          echo "$new_version" > VERSION
          echo "tag=$new_version" >> $GITHUB_ENV

      - name: Commit generated files and version
        run: |
          git add gen/ VERSION
          git diff --quiet && echo "No changes to commit." || git commit -m "chore: buf generate & version ${{ env.tag }}"
          git push origin main

      - name: Create Git Tag
        run: |
          git tag ${{ env.tag }}
          git push origin ${{ env.tag }}