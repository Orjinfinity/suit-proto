name: Buf CI Pipeline

on:
  push:
    branches:
      - 'release/**'
  pull_request:

permissions:
  contents: write

jobs:
  lint-breaking:
    name: Buf Lint & Breaking
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Buf CLI
        uses: bufbuild/buf-setup-action@v1

      - name: Buf Lint
        run: buf lint

      - name: Buf Breaking
        if: github.event_name == 'pull_request' || startsWith(github.ref, 'refs/heads/release/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          AUTHED_URL="https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/orjinfinity/suit-proto.git"
          buf breaking --against "$AUTHED_URL#branch=main"

  generate:
    name: Buf Generate Code
    runs-on: ubuntu-latest
    needs: lint-breaking
    if: github.ref_name != 'main' && startsWith(github.ref, 'refs/heads/release/')

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Buf CLI
        uses: bufbuild/buf-setup-action@v1

      - name: Generate Code
        id: generate
        run: |
          # Generate işlemini çalıştır
          make generate
          
          # Dosya kontrolü
          if [ ! -d "gen" ]; then
            echo "Error: gen/ directory not found after generation"
            exit 1
          fi
          
          # Post-generate script'lerinin çalıştığından emin ol
          for file in Cargo.toml go.mod go.sum; do
            if [ ! -f "$file" ]; then
              echo "Error: $file not found after post-generate scripts"
              exit 1
            fi
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: generated-code
          path: |
            gen/
            Cargo.toml
            go.mod
            go.sum

  publish:
    name: Publish Release
    runs-on: ubuntu-latest
    needs: generate
    if: success() && startsWith(github.ref, 'refs/heads/release/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: generated-code
          path: artifacts

      - name: Setup release files
        run: |
          # Versiyon bilgisini çıkar
          RELEASE_VERSION=${GITHUB_REF##*/release/}
          echo "v$RELEASE_VERSION" > VERSION
          echo "version=v$RELEASE_VERSION" >> $GITHUB_ENV
          
          # Artifact dosyalarını yerleştir
          echo "=== Mevcut artifacts içeriği ==="
          ls -la artifacts/
          
          # Gen klasörünü taşı
          rm -rf gen/
          mv artifacts/gen ./
          
          # Bağımlılık dosyalarını taşı
          for file in Cargo.toml go.mod go.sum; do
            if [ -f "artifacts/$file" ]; then
              mv "artifacts/$file" ./
              echo "Moved $file successfully"
            else
              echo "Warning: $file not found in artifacts"
              exit 1
            fi
          done
          
          # Geçici dizini temizle
          rm -rf artifacts
          
          echo "=== Final dizin içeriği ==="
          ls -la
          
          # Release paketi oluştur
          zip -r generated-code.zip gen/ Cargo.toml go.mod go.sum VERSION
          
          # Kontrol
          echo "=== Release içeriği ==="
          unzip -l generated-code.zip

      - name: Create Git Tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag -f ${{ env.version }}
          git push origin --force ${{ env.version }}

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.version }}
          files: |
            generated-code.zip
            VERSION
          body: |
            ## Proto Release ${{ env.version }}
            
            ### İçerik
            - Generated Protobuf kodları
            - Rust ve Go bağımlılıkları
            
            ### Kullanım
            1. Release'i indirin
            2. `generated-code.zip` dosyasını açın
            3. İlgili dil için gerekli dosyaları projenize ekleyin
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup
        if: always()
        run: rm -f generated-code.zip