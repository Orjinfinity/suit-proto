// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: projectsuit/material/v1/material_command_v1.proto

package materialv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MaterialCommandService_CreateMaterial_FullMethodName = "/projectsuit.material.v1.MaterialCommandService/CreateMaterial"
	MaterialCommandService_UpdateMaterial_FullMethodName = "/projectsuit.material.v1.MaterialCommandService/UpdateMaterial"
	MaterialCommandService_DeleteMaterial_FullMethodName = "/projectsuit.material.v1.MaterialCommandService/DeleteMaterial"
)

// MaterialCommandServiceClient is the client API for MaterialCommandService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaterialCommandServiceClient interface {
	CreateMaterial(ctx context.Context, in *CreateMaterialRequest, opts ...grpc.CallOption) (*CreateMaterialResponse, error)
	UpdateMaterial(ctx context.Context, in *UpdateMaterialRequest, opts ...grpc.CallOption) (*UpdateMaterialResponse, error)
	DeleteMaterial(ctx context.Context, in *DeleteMaterialRequest, opts ...grpc.CallOption) (*DeleteMaterialResponse, error)
}

type materialCommandServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaterialCommandServiceClient(cc grpc.ClientConnInterface) MaterialCommandServiceClient {
	return &materialCommandServiceClient{cc}
}

func (c *materialCommandServiceClient) CreateMaterial(ctx context.Context, in *CreateMaterialRequest, opts ...grpc.CallOption) (*CreateMaterialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMaterialResponse)
	err := c.cc.Invoke(ctx, MaterialCommandService_CreateMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialCommandServiceClient) UpdateMaterial(ctx context.Context, in *UpdateMaterialRequest, opts ...grpc.CallOption) (*UpdateMaterialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateMaterialResponse)
	err := c.cc.Invoke(ctx, MaterialCommandService_UpdateMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialCommandServiceClient) DeleteMaterial(ctx context.Context, in *DeleteMaterialRequest, opts ...grpc.CallOption) (*DeleteMaterialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMaterialResponse)
	err := c.cc.Invoke(ctx, MaterialCommandService_DeleteMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaterialCommandServiceServer is the server API for MaterialCommandService service.
// All implementations must embed UnimplementedMaterialCommandServiceServer
// for forward compatibility.
type MaterialCommandServiceServer interface {
	CreateMaterial(context.Context, *CreateMaterialRequest) (*CreateMaterialResponse, error)
	UpdateMaterial(context.Context, *UpdateMaterialRequest) (*UpdateMaterialResponse, error)
	DeleteMaterial(context.Context, *DeleteMaterialRequest) (*DeleteMaterialResponse, error)
	mustEmbedUnimplementedMaterialCommandServiceServer()
}

// UnimplementedMaterialCommandServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMaterialCommandServiceServer struct{}

func (UnimplementedMaterialCommandServiceServer) CreateMaterial(context.Context, *CreateMaterialRequest) (*CreateMaterialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMaterial not implemented")
}
func (UnimplementedMaterialCommandServiceServer) UpdateMaterial(context.Context, *UpdateMaterialRequest) (*UpdateMaterialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMaterial not implemented")
}
func (UnimplementedMaterialCommandServiceServer) DeleteMaterial(context.Context, *DeleteMaterialRequest) (*DeleteMaterialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMaterial not implemented")
}
func (UnimplementedMaterialCommandServiceServer) mustEmbedUnimplementedMaterialCommandServiceServer() {
}
func (UnimplementedMaterialCommandServiceServer) testEmbeddedByValue() {}

// UnsafeMaterialCommandServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaterialCommandServiceServer will
// result in compilation errors.
type UnsafeMaterialCommandServiceServer interface {
	mustEmbedUnimplementedMaterialCommandServiceServer()
}

func RegisterMaterialCommandServiceServer(s grpc.ServiceRegistrar, srv MaterialCommandServiceServer) {
	// If the following call pancis, it indicates UnimplementedMaterialCommandServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MaterialCommandService_ServiceDesc, srv)
}

func _MaterialCommandService_CreateMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialCommandServiceServer).CreateMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialCommandService_CreateMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialCommandServiceServer).CreateMaterial(ctx, req.(*CreateMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialCommandService_UpdateMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialCommandServiceServer).UpdateMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialCommandService_UpdateMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialCommandServiceServer).UpdateMaterial(ctx, req.(*UpdateMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialCommandService_DeleteMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialCommandServiceServer).DeleteMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialCommandService_DeleteMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialCommandServiceServer).DeleteMaterial(ctx, req.(*DeleteMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MaterialCommandService_ServiceDesc is the grpc.ServiceDesc for MaterialCommandService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaterialCommandService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "projectsuit.material.v1.MaterialCommandService",
	HandlerType: (*MaterialCommandServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMaterial",
			Handler:    _MaterialCommandService_CreateMaterial_Handler,
		},
		{
			MethodName: "UpdateMaterial",
			Handler:    _MaterialCommandService_UpdateMaterial_Handler,
		},
		{
			MethodName: "DeleteMaterial",
			Handler:    _MaterialCommandService_DeleteMaterial_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "projectsuit/material/v1/material_command_v1.proto",
}
