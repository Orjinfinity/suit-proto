// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: projectsuit/material/v1/material_query_v1.proto

package materialv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MaterialQueryService_GetMaterial_FullMethodName   = "/projectsuit.material.v1.MaterialQueryService/GetMaterial"
	MaterialQueryService_ListMaterials_FullMethodName = "/projectsuit.material.v1.MaterialQueryService/ListMaterials"
)

// MaterialQueryServiceClient is the client API for MaterialQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaterialQueryServiceClient interface {
	GetMaterial(ctx context.Context, in *GetMaterialRequest, opts ...grpc.CallOption) (*GetMaterialResponse, error)
	ListMaterials(ctx context.Context, in *ListMaterialsRequest, opts ...grpc.CallOption) (*ListMaterialsResponse, error)
}

type materialQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaterialQueryServiceClient(cc grpc.ClientConnInterface) MaterialQueryServiceClient {
	return &materialQueryServiceClient{cc}
}

func (c *materialQueryServiceClient) GetMaterial(ctx context.Context, in *GetMaterialRequest, opts ...grpc.CallOption) (*GetMaterialResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMaterialResponse)
	err := c.cc.Invoke(ctx, MaterialQueryService_GetMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialQueryServiceClient) ListMaterials(ctx context.Context, in *ListMaterialsRequest, opts ...grpc.CallOption) (*ListMaterialsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMaterialsResponse)
	err := c.cc.Invoke(ctx, MaterialQueryService_ListMaterials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaterialQueryServiceServer is the server API for MaterialQueryService service.
// All implementations must embed UnimplementedMaterialQueryServiceServer
// for forward compatibility.
type MaterialQueryServiceServer interface {
	GetMaterial(context.Context, *GetMaterialRequest) (*GetMaterialResponse, error)
	ListMaterials(context.Context, *ListMaterialsRequest) (*ListMaterialsResponse, error)
	mustEmbedUnimplementedMaterialQueryServiceServer()
}

// UnimplementedMaterialQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMaterialQueryServiceServer struct{}

func (UnimplementedMaterialQueryServiceServer) GetMaterial(context.Context, *GetMaterialRequest) (*GetMaterialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaterial not implemented")
}
func (UnimplementedMaterialQueryServiceServer) ListMaterials(context.Context, *ListMaterialsRequest) (*ListMaterialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMaterials not implemented")
}
func (UnimplementedMaterialQueryServiceServer) mustEmbedUnimplementedMaterialQueryServiceServer() {}
func (UnimplementedMaterialQueryServiceServer) testEmbeddedByValue()                              {}

// UnsafeMaterialQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaterialQueryServiceServer will
// result in compilation errors.
type UnsafeMaterialQueryServiceServer interface {
	mustEmbedUnimplementedMaterialQueryServiceServer()
}

func RegisterMaterialQueryServiceServer(s grpc.ServiceRegistrar, srv MaterialQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedMaterialQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MaterialQueryService_ServiceDesc, srv)
}

func _MaterialQueryService_GetMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaterialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialQueryServiceServer).GetMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialQueryService_GetMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialQueryServiceServer).GetMaterial(ctx, req.(*GetMaterialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialQueryService_ListMaterials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMaterialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialQueryServiceServer).ListMaterials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialQueryService_ListMaterials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialQueryServiceServer).ListMaterials(ctx, req.(*ListMaterialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MaterialQueryService_ServiceDesc is the grpc.ServiceDesc for MaterialQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaterialQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "projectsuit.material.v1.MaterialQueryService",
	HandlerType: (*MaterialQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMaterial",
			Handler:    _MaterialQueryService_GetMaterial_Handler,
		},
		{
			MethodName: "ListMaterials",
			Handler:    _MaterialQueryService_ListMaterials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "projectsuit/material/v1/material_query_v1.proto",
}
