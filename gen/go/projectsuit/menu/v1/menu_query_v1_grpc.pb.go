// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: projectsuit/menu/v1/menu_query_v1.proto

package menuv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MenuQueryService_GetMenu_FullMethodName   = "/projectsuit.menu.v1.MenuQueryService/GetMenu"
	MenuQueryService_ListMenus_FullMethodName = "/projectsuit.menu.v1.MenuQueryService/ListMenus"
)

// MenuQueryServiceClient is the client API for MenuQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MenuQueryServiceClient interface {
	GetMenu(ctx context.Context, in *GetMenuRequest, opts ...grpc.CallOption) (*GetMenuResponse, error)
	ListMenus(ctx context.Context, in *ListMenusRequest, opts ...grpc.CallOption) (*ListMenusResponse, error)
}

type menuQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMenuQueryServiceClient(cc grpc.ClientConnInterface) MenuQueryServiceClient {
	return &menuQueryServiceClient{cc}
}

func (c *menuQueryServiceClient) GetMenu(ctx context.Context, in *GetMenuRequest, opts ...grpc.CallOption) (*GetMenuResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMenuResponse)
	err := c.cc.Invoke(ctx, MenuQueryService_GetMenu_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *menuQueryServiceClient) ListMenus(ctx context.Context, in *ListMenusRequest, opts ...grpc.CallOption) (*ListMenusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMenusResponse)
	err := c.cc.Invoke(ctx, MenuQueryService_ListMenus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MenuQueryServiceServer is the server API for MenuQueryService service.
// All implementations must embed UnimplementedMenuQueryServiceServer
// for forward compatibility.
type MenuQueryServiceServer interface {
	GetMenu(context.Context, *GetMenuRequest) (*GetMenuResponse, error)
	ListMenus(context.Context, *ListMenusRequest) (*ListMenusResponse, error)
	mustEmbedUnimplementedMenuQueryServiceServer()
}

// UnimplementedMenuQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMenuQueryServiceServer struct{}

func (UnimplementedMenuQueryServiceServer) GetMenu(context.Context, *GetMenuRequest) (*GetMenuResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMenu not implemented")
}
func (UnimplementedMenuQueryServiceServer) ListMenus(context.Context, *ListMenusRequest) (*ListMenusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMenus not implemented")
}
func (UnimplementedMenuQueryServiceServer) mustEmbedUnimplementedMenuQueryServiceServer() {}
func (UnimplementedMenuQueryServiceServer) testEmbeddedByValue()                          {}

// UnsafeMenuQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MenuQueryServiceServer will
// result in compilation errors.
type UnsafeMenuQueryServiceServer interface {
	mustEmbedUnimplementedMenuQueryServiceServer()
}

func RegisterMenuQueryServiceServer(s grpc.ServiceRegistrar, srv MenuQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedMenuQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MenuQueryService_ServiceDesc, srv)
}

func _MenuQueryService_GetMenu_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMenuRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuQueryServiceServer).GetMenu(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuQueryService_GetMenu_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuQueryServiceServer).GetMenu(ctx, req.(*GetMenuRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MenuQueryService_ListMenus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMenusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MenuQueryServiceServer).ListMenus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MenuQueryService_ListMenus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MenuQueryServiceServer).ListMenus(ctx, req.(*ListMenusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MenuQueryService_ServiceDesc is the grpc.ServiceDesc for MenuQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MenuQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "projectsuit.menu.v1.MenuQueryService",
	HandlerType: (*MenuQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMenu",
			Handler:    _MenuQueryService_GetMenu_Handler,
		},
		{
			MethodName: "ListMenus",
			Handler:    _MenuQueryService_ListMenus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "projectsuit/menu/v1/menu_query_v1.proto",
}
