// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: projectsuit/recipe/v1/recipe_query_v1.proto

package recipev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RecipeQueryService_GetRecipe_FullMethodName   = "/projectsuit.recipe.v1.RecipeQueryService/GetRecipe"
	RecipeQueryService_ListRecipes_FullMethodName = "/projectsuit.recipe.v1.RecipeQueryService/ListRecipes"
)

// RecipeQueryServiceClient is the client API for RecipeQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecipeQueryServiceClient interface {
	GetRecipe(ctx context.Context, in *GetRecipeRequest, opts ...grpc.CallOption) (*GetRecipeResponse, error)
	ListRecipes(ctx context.Context, in *ListRecipesRequest, opts ...grpc.CallOption) (*ListRecipesResponse, error)
}

type recipeQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRecipeQueryServiceClient(cc grpc.ClientConnInterface) RecipeQueryServiceClient {
	return &recipeQueryServiceClient{cc}
}

func (c *recipeQueryServiceClient) GetRecipe(ctx context.Context, in *GetRecipeRequest, opts ...grpc.CallOption) (*GetRecipeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRecipeResponse)
	err := c.cc.Invoke(ctx, RecipeQueryService_GetRecipe_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recipeQueryServiceClient) ListRecipes(ctx context.Context, in *ListRecipesRequest, opts ...grpc.CallOption) (*ListRecipesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRecipesResponse)
	err := c.cc.Invoke(ctx, RecipeQueryService_ListRecipes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecipeQueryServiceServer is the server API for RecipeQueryService service.
// All implementations must embed UnimplementedRecipeQueryServiceServer
// for forward compatibility.
type RecipeQueryServiceServer interface {
	GetRecipe(context.Context, *GetRecipeRequest) (*GetRecipeResponse, error)
	ListRecipes(context.Context, *ListRecipesRequest) (*ListRecipesResponse, error)
	mustEmbedUnimplementedRecipeQueryServiceServer()
}

// UnimplementedRecipeQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRecipeQueryServiceServer struct{}

func (UnimplementedRecipeQueryServiceServer) GetRecipe(context.Context, *GetRecipeRequest) (*GetRecipeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecipe not implemented")
}
func (UnimplementedRecipeQueryServiceServer) ListRecipes(context.Context, *ListRecipesRequest) (*ListRecipesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRecipes not implemented")
}
func (UnimplementedRecipeQueryServiceServer) mustEmbedUnimplementedRecipeQueryServiceServer() {}
func (UnimplementedRecipeQueryServiceServer) testEmbeddedByValue()                            {}

// UnsafeRecipeQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecipeQueryServiceServer will
// result in compilation errors.
type UnsafeRecipeQueryServiceServer interface {
	mustEmbedUnimplementedRecipeQueryServiceServer()
}

func RegisterRecipeQueryServiceServer(s grpc.ServiceRegistrar, srv RecipeQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedRecipeQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RecipeQueryService_ServiceDesc, srv)
}

func _RecipeQueryService_GetRecipe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecipeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeQueryServiceServer).GetRecipe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipeQueryService_GetRecipe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeQueryServiceServer).GetRecipe(ctx, req.(*GetRecipeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RecipeQueryService_ListRecipes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRecipesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecipeQueryServiceServer).ListRecipes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RecipeQueryService_ListRecipes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecipeQueryServiceServer).ListRecipes(ctx, req.(*ListRecipesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RecipeQueryService_ServiceDesc is the grpc.ServiceDesc for RecipeQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RecipeQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "projectsuit.recipe.v1.RecipeQueryService",
	HandlerType: (*RecipeQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecipe",
			Handler:    _RecipeQueryService_GetRecipe_Handler,
		},
		{
			MethodName: "ListRecipes",
			Handler:    _RecipeQueryService_ListRecipes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "projectsuit/recipe/v1/recipe_query_v1.proto",
}
