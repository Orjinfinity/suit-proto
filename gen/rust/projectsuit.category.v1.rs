// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CategoryInput {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub description: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="3")]
    pub translations: ::prost::alloc::vec::Vec<super::super::common::v1::Translation>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Category {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub description: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="4")]
    pub translations: ::prost::alloc::vec::Vec<super::super::common::v1::Translation>,
    #[prost(string, tag="5")]
    pub created_at: ::prost::alloc::string::String,
    #[prost(string, tag="6")]
    pub updated_at: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CategoryView {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub parent_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag="3")]
    pub name: ::core::option::Option<super::super::common::v1::Translation>,
    #[prost(message, optional, tag="4")]
    pub description: ::core::option::Option<super::super::common::v1::Translation>,
    #[prost(string, tag="5")]
    pub image_url: ::prost::alloc::string::String,
    #[prost(bool, tag="6")]
    pub is_active: bool,
    #[prost(int64, tag="7")]
    pub created_at: i64,
    #[prost(int64, tag="8")]
    pub updated_at: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateCategoryRequest {
    #[prost(message, optional, tag="1")]
    pub category: ::core::option::Option<CategoryInput>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateCategoryResponse {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateCategoryRequest {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub category: ::core::option::Option<CategoryInput>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateCategoryResponse {
    #[prost(bool, tag="1")]
    pub success: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteCategoryRequest {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteCategoryResponse {
    #[prost(bool, tag="1")]
    pub success: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCategoryRequest {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetCategoryResponse {
    #[prost(message, optional, tag="1")]
    pub category: ::core::option::Option<CategoryView>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCategoriesRequest {
    #[prost(int32, tag="1")]
    pub page: i32,
    #[prost(int32, tag="2")]
    pub limit: i32,
    #[prost(string, tag="3")]
    pub search: ::prost::alloc::string::String,
    #[prost(string, tag="4")]
    pub parent_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListCategoriesResponse {
    #[prost(message, repeated, tag="1")]
    pub categories: ::prost::alloc::vec::Vec<CategoryView>,
    #[prost(int32, tag="2")]
    pub total: i32,
}
include!("projectsuit.category.v1.tonic.rs");
// @@protoc_insertion_point(module)