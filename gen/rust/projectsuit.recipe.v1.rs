// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecipeItem {
    #[prost(string, tag="1")]
    pub material_id: ::prost::alloc::string::String,
    #[prost(double, tag="2")]
    pub quantity: f64,
    #[prost(string, tag="3")]
    pub unit: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Recipe {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub product_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="3")]
    pub items: ::prost::alloc::vec::Vec<RecipeItem>,
    #[prost(bool, tag="4")]
    pub is_active: bool,
    #[prost(int64, tag="5")]
    pub created_at: i64,
    #[prost(int64, tag="6")]
    pub updated_at: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecipeInput {
    #[prost(string, tag="1")]
    pub product_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="2")]
    pub items: ::prost::alloc::vec::Vec<RecipeItem>,
    #[prost(bool, tag="3")]
    pub is_active: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecipeView {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub product_id: ::prost::alloc::string::String,
    #[prost(message, repeated, tag="3")]
    pub items: ::prost::alloc::vec::Vec<RecipeItem>,
    #[prost(bool, tag="4")]
    pub is_active: bool,
    #[prost(int64, tag="5")]
    pub created_at: i64,
    #[prost(int64, tag="6")]
    pub updated_at: i64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateRecipeRequest {
    #[prost(message, optional, tag="1")]
    pub recipe: ::core::option::Option<RecipeInput>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateRecipeResponse {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateRecipeRequest {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
    #[prost(message, optional, tag="2")]
    pub recipe: ::core::option::Option<RecipeInput>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateRecipeResponse {
    #[prost(bool, tag="1")]
    pub success: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DeleteRecipeRequest {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteRecipeResponse {
    #[prost(bool, tag="1")]
    pub success: bool,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRecipeRequest {
    #[prost(string, tag="1")]
    pub id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRecipeResponse {
    #[prost(message, optional, tag="1")]
    pub recipe: ::core::option::Option<RecipeView>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRecipesRequest {
    #[prost(int32, tag="1")]
    pub page: i32,
    #[prost(int32, tag="2")]
    pub page_size: i32,
    #[prost(string, tag="3")]
    pub product_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRecipesResponse {
    #[prost(message, repeated, tag="1")]
    pub items: ::prost::alloc::vec::Vec<RecipeView>,
    #[prost(int32, tag="2")]
    pub total: i32,
}
include!("projectsuit.recipe.v1.tonic.rs");
// @@protoc_insertion_point(module)